%option noyywrap
%{
#include <string.h>
#include <stdio.h>
#include <glib.h>


GTree * verbosPrint;
FILE * text;
void verbos(char *yytext,int indice);
gboolean func(gpointer k, gpointer v, gpointer cnt);
gint comparador(gconstpointer aPtr, gconstpointer bPtr);
gboolean iterador(gpointer key, gpointer value, gpointer data);

%}
%%

\'m {
	fprintf(yyout,"%s"," am");
}

\'s {
	fprintf(yyout,"%s"," is");
}
\'re {
	fprintf(yyout,"%s"," are");
}
\'ll {
	fprintf(yyout,"%s"," will");
}
\'ve {
	fprintf(yyout,"%s"," have");
}
an\'t {
	fprintf(yyout,"%s","annot");
}
n\'t {
	fprintf(yyout,"%s"," not");
}
[Ww]on\'t {
	fprintf(yyout,"%s"," will not");
}
\'d {
	fprintf(yyout,"%s"," would");
}

(to\ |can\ |could\ |shall\ |should\ |will\ |would\ |may\ |might\ ) {
	verbos(yytext,1);
}

(do\ |does\ |did\ ) {
	verbos(yytext,2);
}


%%


void verbos (char* yytext, int indice) {
/* Separar o verbo do resto*/
		int cont = 0;
		char* verb = (char*)malloc(sizeof(char) * 32);
		char* token =  (char *)malloc(sizeof(char) * 32);
		token = strtok(yytext, " ");
		while(token != NULL) {
				token = strtok(NULL, " ");
				if (cont < indice && token != NULL) {
					verb = strdup(token);
				}
				else break;
				cont++;
		}

		int *gp = (int *) g_tree_lookup(verbosPrint,verb);
		if (gp == NULL && (strlen(verb) > 1) ){
			gint* i = g_new(gint,1);
			(*i) = 1;
			g_tree_insert(verbosPrint,verb,i);
		}
		else {
			gint* i = g_new(gint,1);
			gpointer p = g_tree_search(verbosPrint, (GCompareFunc) func ,verb);
			gint cont = *(gint*) p;
			(*i) = cont + 1;
			g_tree_replace(verbosPrint,verb,i);
		}
	}


gboolean func (gpointer k, gpointer v, gpointer cnt){
		return strcmp (k , cnt) == 0;
}

// recebe dois apontadores para uma string -> verificar se esta correto
gint comparador(gconstpointer aPtr, gconstpointer bPtr){
	/*[Ma]=
	gint i , j;
	i = *(gint *)iPtr;
  	j = *(gint *)jPtr;

	if(i < j) return 1;
	return -1;
	*/
	// verificar
	return strcmp(aPtr,bPtr);
}

gboolean iterador (gpointer key, gpointer value, gpointer data){

	printf("%s\n",value);

	fprintf(yyout,"to %s\n",value);


	return FALSE;
}

int main (int argc, char* argv[]) {

	verbosPrint = g_tree_new(comparador);

	yyout = fopen("textoProcessado.txt", "w");

	if(argc == 2)
		yyin = fopen(argv[1], "r");

	yylex();

	g_tree_foreach(verbosPrint, (GTraverseFunc)iterador, NULL);

    return 0;
}
