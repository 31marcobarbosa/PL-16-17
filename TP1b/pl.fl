%option noyywrap
%{
#include <string.h>
#include <stdio.h>
#include <glib.h>

GTree * verbosPrint;
FILE * text;
void verbos(char *yytext,int indice);
gboolean func(gpointer k, gpointer v, gpointer cnt);
gint comparador(gconstpointer aPtr, gconstpointer bPtr);
gboolean iterador(gpointer key, gpointer value, gpointer data);

%}
%%

\'m {
	fprintf(text,"%s"," am");
}

\'s {
	fprintf(text,"%s"," is");
}
\'re {
	fprintf(text,"%s"," are");
}
\'ll {
	fprintf(text,"%s"," will");
}
\'ve {
	fprintf(text,"%s"," have");
}
an\'t {
	fprintf(text,"%s","annot");
}
n\'t {
	fprintf(text,"%s"," not");
}
[Ww]on\'t {
	fprintf(text,"%s"," will not");
}
\'d {
	fprintf(text,"%s"," would");
}

(can|could|shall|should|will|would|may|might)\ [a-z]* {
	verbos(yytext,1);
}

(do|does|did)\ [a-z]*\ [a-z]* {
	verbos(yytext,2);
}


%%


void verbos (char* yytext, int indice) {
/* Separar o verbo do resto*/
		printf("entrei na putinha com a pilinha \n");
		printf("TEXT: %s\n", yytext);
		int cont = 0;
		char* verb = (char*)malloc(sizeof(char) * 32);
		char* token =  (char *)malloc(sizeof(char) * 32);
		token = strtok(yytext, " ");
		printf("TOKEN: %s\n", token);
		while(token != NULL) {
				token = strtok(NULL, " ");
				if (cont < indice && token != NULL) {
					verb = strdup(token);
				}
				else break;
				cont++;
		}
		printf("VERB %s\n", verb);
		int *gp = (int *) g_tree_lookup(verbosPrint,verb);
		if (gp == NULL && (strlen(verb) > 1) ){
			gint* i = g_new(gint,1);
			(*i) = 1;
			g_tree_insert(verbosPrint,verb,i);
			
		}
		else {
			gint* i = g_new(gint,1);
			gpointer p = g_tree_lookup(verbosPrint,verb);
			gint cont = *(gint*) p;
			(*i) = cont + 1;
			g_tree_replace(verbosPrint,verb,i);
		}
	}


// recebe dois apontadores para uma string -> verificar se esta correto
gint comparador(gconstpointer aPtr, gconstpointer bPtr){
		return strcmp(aPtr,bPtr);
}

gboolean iterador (gpointer key, gpointer value, gpointer data){



	fprintf(yyout,"to %s, %d\n",key, *(gint*)value);


	return FALSE;
}

int main (int argc, char* argv[]) {

	verbosPrint = g_tree_new(comparador);

	text = fopen("textoProcessado.txt", "w");
	yyout = text;

	if(argc == 2)
		yyin = fopen(argv[1], "r");

	yylex();

	g_tree_foreach(verbosPrint, (GTraverseFunc)iterador, NULL);

    return 0;
	}
